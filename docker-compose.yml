services:
  backend:
    build:
      context: ./backend
      target: builder
    restart: on-failure
    volumes:
      - ./backend/src:/app/src
      - ./backend/index.ts:/app/index.ts
      - ./backend/nodemon.json:/app/nodemon.json
      - ./backend/prompts:/app/prompts
      - ./volumes/db:/app/data
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${API_PORT}
      IPFS_CLUSTER_HOST: ${IPFS_CLUSTER_HOST}
      IPFS_GATEWAY_HOST: ${IPFS_GATEWAY_HOST}
      IPFS_PINSVC_HOST: ${IPFS_PINSVC_HOST}
      OLLAMA_MODEL: ${OLLAMA_MODEL}
      OPENWEBUI_HOST: ${OPENWEBUI_HOST}
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY}
      ADMIN_USER_EMAIL: ${ADMIN_USER_EMAIL}
      ADMIN_USER_PASSWORD: ${ADMIN_USER_PASSWORD}
      AUTO_DOWNLOAD: ${AUTO_DOWNLOAD}
      DISABLE_ALL_AI_FUNCTIONALITY: ${DISABLE_ALL_AI_FUNCTIONALITY}
      DATABASE_PATH: /app/data/truspace.db
      JWT_SECRET: ${JWT_SECRET}
      JWT_MAX_AGE: ${JWT_MAX_AGE}
      CORS_ORIGIN: ${CORS_ORIGIN}
      REGISTER_USERS_AS_INACTIVE: ${REGISTER_USERS_AS_INACTIVE}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SSL: ${SMTP_SSL}
      SMTP_TLS: ${SMTP_TLS}
      EMAIL_SENDER: ${EMAIL_SENDER}
    ports:
      - ${API_PORT}:${API_PORT}
    entrypoint: sh ./entrypoint.sh

  ipfs0:
    container_name: ipfs0
    image: ipfs/kubo:release
    restart: unless-stopped
    user: ${LUID}:${LGID}
    environment:
      IPFS_NODE_PEERS: ${IPFS_NODE_PEERS}
    ports:
      - "${SWARM_PORT}:${SWARM_PORT}" # ipfs swarm - expose if needed/wanted
      - "${IPFS_API_PORT}:${IPFS_API_PORT}" # ipfs api - expose if needed/wanted
      - "${IPFS_GATEWAY_PORT}:${IPFS_GATEWAY_PORT}" # ipfs gateway - expose if needed/wanted
    volumes:
      - ./volumes/ipfs0:/data/ipfs
      ## Uncomment below to attach volume with custom init script
      # - ./scripts/init/init_ipfs.sh:/container-init.d/init_ipfs.sh

  cluster0:
    container_name: cluster0
    image: ipfs/ipfs-cluster:latest
    restart: unless-stopped
    user: ${LUID}:${LGID}
    depends_on:
      - ipfs0
    environment:
      CLUSTER_PEERNAME: ${CLUSTER_PEERNAME_0}
      CLUSTER_SECRET: ${CLUSTER_SECRET}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: ${CLUSTER_IPFSHTTP_NODEMULTIADDRESS_0}
      CLUSTER_CRDT_TRUSTEDPEERS: ${CLUSTER_CRDT_TRUSTEDPEERS_0} # Trust all peers in Cluster
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: ${CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS} # Expose API
      CLUSTER_PINSVCAPI_HTTPLISTENMULTIADDRESS: ${CLUSTER_PINSVCAPI_HTTPLISTENMULTIADDRESS} # Exposes Pinning Service API
      CLUSTER_MONITORPINGINTERVAL: ${CLUSTER_MONITORPINGINTERVAL} # Speed up peer discovery
      CLUSTER_PEERS: ${CLUSTER_PEERS}
    ports:
      # Open API port (allows ipfs-cluster-ctl usage on host)
      - "${OPEN_API_PORT}:${OPEN_API_PORT}"
      # IPFS pinning service api
      - "${PINNING_SERVICE_PORT}:${PINNING_SERVICE_PORT}"
      # The cluster swarm port would need  to be exposed if this container
      # was to connect to cluster peers on other hosts.
      # But this is just a testing cluster.
      # - "9095:9095" # Cluster IPFS Proxy endpoint
      - "${CLUSTER_SWARM_PORT}:${CLUSTER_SWARM_PORT}" # Cluster swarm endpoint
    volumes:
      - ./volumes/cluster0:/data/ipfs-cluster
